#方法1
def rotate(self, nums, k):
    n=len(nums)
    k%=n
    for i in range(k):
        nums.insert(0,nums.pop())
    return nums

def rotate(self,nums,k):
    res=nums[:]
    n=len(nums)
    for i in range(n):
        pos=(i+k)%n
        res[pos]=nums[i]
    return res

def rotate(self,nums,k):
    n=len(nums)
    k%=n
    nums[:]=nums[n-k:]+nums[:n-k]
    return nums

#方法2
def rotate(self,nums,k):
    def reverse(l,r):
        while l<r:
            nums[l],nums[r]=nums[r],nums[l]
            l+=1
            r-=1
    n=len(nums)
    k%=n
    reverse(0,n-1)
    reverse(0,k-1)
    reverse(k,n-1)
    return nums

def rotate(self,nums,k):
    n=len(nums)
    k%=n
    nums[:]=nums[::-1]
    nums[:k]=nums[:k][::-1]
    nums[k:]=nums[k:][::-1]
    return nums

#方法3
import math
def rotate(self,nums,k):
    n=len(nums)
    round=math.gcd(n,k)
    for i in range(round):
        cur,buffer=i,nums[i]
        start=cur
        while True:
            next=(cur+k)%n
            nums[next],buffer=buffer,nums[next]
            cur=next
            if start==cur:
                break
    return nums

n=len(nums)
k%=n
cnt,start=0,0
while cnt<n:
    cur,buffer=start,nums[start]
    while True:
        cnt+=1
        next=(cur+k)%n
        nums[next],buffer=buffer,nums[next]
        cur=next
        if start==cur:
            start+=1
            break
        
nums=[1,2,3,4,5,6,7]
k=3
rotate(_,nums,k)
